generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model shops {
  shop_domain          String    @id
  offline_access_token String
  installed_at         DateTime  @default(now()) @db.Timestamptz(6)
  uninstalled          Boolean   @default(false)
  redacted_at          DateTime? @db.Timestamptz(6)
}

model webhook_deliveries {
  webhook_id       String    @id
  topic            String
  shop_domain      String
  triggered_at     DateTime? @db.Timestamptz(6)
  received_at      DateTime  @default(now()) @db.Timestamptz(6)
  payload          Json
  event_id         String    @unique
  api_version      String    @default("2025-07")
  last_received_at DateTime  @default(now()) @db.Timestamptz(6)
  duplicate_count  Int       @default(0)
  latency_ms       Int?
  headers          Json?

  @@index([received_at])
  @@index([topic, shop_domain])
}

model webhook_jobs {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic        webhook_job_topic
  shop_domain  String
  status       webhook_job_status @default(pending)
  payload      Json?
  queued_at    DateTime           @default(now()) @db.Timestamptz(6)
  run_at       DateTime           @default(now()) @db.Timestamptz(6)
  attempts     Int?
  last_error   String?
  last_attempt DateTime?          @db.Timestamptz(6)
  due_at       DateTime           @db.Timestamptz(6)

  @@index([due_at])
  @@index([status, run_at])
  @@index([topic, status])
}

enum webhook_job_status {
  pending
  processing
  completed
  failed
}

enum webhook_job_topic {
  customers_data_request
  customers_redact
  shop_redact
}
